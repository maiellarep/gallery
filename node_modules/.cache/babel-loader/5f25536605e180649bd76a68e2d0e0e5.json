{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\internship\\\\gallery\\\\src\\\\AddImg.js\";\nimport React from 'react';\nimport './css/CollectionsPage.css';\nimport IndexedDbRepository from './IndexedRepository';\n\nclass AddImg extends React.Component {\n  constructor(props) {\n    super(props);\n    this.add = this.add.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      d: null,\n      name: 'rgergev',\n      format: 'ergerger',\n      description: '',\n      image: '',\n      tasks: null\n    };\n\n    this.handleAdd = async () => {\n      await this.repository.save({\n        name: this.state.name,\n        description: this.state.description\n      });\n      this.setState({\n        tasks: null\n      });\n      this.setState({\n        tasks: await this.repository.findAll()\n      });\n    };\n\n    this.handleDelete = async idToDelete => {\n      await this.repository.deleteById(idToDelete);\n      this.setState({\n        tasks: null\n      });\n      this.setState({\n        tasks: await this.repository.findAll()\n      });\n    };\n  }\n\n  componentDidMount() {\n    /*if ( !window.indexedDB ) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n    if ( !window.IDBTransaction ) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\r\n    if ( !window.IDBKeyRange ) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n    var d;\r\n    var openRequest = indexedDB.open(\"gallery\",1);\r\n    openRequest.onsuccess = function(e) {\r\n        console.log(\"Success!\");\r\n          d = e.target.result;\r\n        d.onerror = function(event){\r\n            alert(event.target.errorcode);\r\n        }\r\n    }\r\n       openRequest.onerror = function(e) {\r\n        console.log(\"Error\");\r\n        console.dir(e);\r\n    }\r\n      this.setState(\r\n        {db: d}\r\n    );\r\n    */\n\n    /*  var request = window.indexedDB.open(\"testDB\", 1);\r\n        var db;\r\n    request.onerror = function(event){\r\n    console.log(\"Error opening DB\", event);\r\n    }\r\n    request.onupgradeneeded   = function(event){\r\n    console.log(\"Upgrading\");\r\n    db = event.target.result;\r\n    var objectStore = db.createObjectStore(\"students\", { keyPath : \"rollNo\" });\r\n    };\r\n    request.onsuccess  = function(event){\r\n    console.log(\"Success opening DB\");\r\n    db = event.target.result;\r\n    }\r\n    var transaction = db.transaction([\"students\"],\"readwrite\");\r\n    transaction.oncomplete = function(event) {\r\n    console.log(\"Success\");\r\n    };\r\n    transaction.onerror = function(event) {\r\n    console.log(\"Error\");\r\n    };  \r\n    var objectStore = transaction.objectStore(\"students\");\r\n    objectStore.add(\"egega\");*/\n    this.repository = new IndexedDbRepository();\n    this.repository.findAll().then(tasks => this.setState({\n      tasks\n    }));\n  }\n\n  add() {\n    /* alert(\"dfbdv\");\r\n     alert(this.state.db);\r\n     var transaction = this.state.db.transaction([\"notes\"],\"readwrite\");\r\n     var store = transaction.objectStore(\"notes\");\r\n       var request = store.add({name: this.state.name, format: this.state.format},1);*/\n\n    /*.............................................\r\n    var db;\r\n    let dbReq = indexedDB.open('myDB', 1);\r\n    dbReq.onupgradeneeded = (event) => {\r\n    // Зададим переменной db ссылку на базу данных\r\n    db = event.target.result;\r\n    // Создадим хранилище объектов с именем notes.\r\n    let notes = db.createObjectStore('notes', {autoIncrement: true});\r\n    }\r\n    dbReq.onsuccess = (event) => {\r\n    db = event.target.result;\r\n    alert(db);\r\n    let tx = db.transaction(['notes'], 'readwrite');\r\n    alert(tx);\r\n    let store = tx.objectStore('notes');\r\n    alert(store);\r\n    let note = {name: this.state.name, descriptin: this.state.description};\r\n    alert(note);\r\n    let operation = store.add(note);\r\n    alert(operation);\r\n    }\r\n    dbReq.onerror = (event) => {\r\n    alert('error opening database ' + event.target.errorCode);\r\n    }*/\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, \"BDFBFSBS\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.add,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, \"fbfdbds\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, \"\\u0417\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"name\",\n      class: \"input_1\",\n      name: \"name\",\n      type: \"text\",\n      value: this.state.name,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 131\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"description\",\n      class: \"input_1\",\n      name: \"description\",\n      type: \"text\",\n      value: this.state.description,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 152\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, \"\\u0422\\u0435\\u043A\\u0441\\u0442\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn green\",\n      onClick: this.handleAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"));\n  }\n\n}\n\nexport default AddImg;","map":{"version":3,"sources":["C:/Users/User/Desktop/internship/gallery/src/AddImg.js"],"names":["React","IndexedDbRepository","AddImg","Component","constructor","props","add","bind","handleChange","state","d","name","format","description","image","tasks","handleAdd","repository","save","setState","findAll","handleDelete","idToDelete","deleteById","componentDidMount","then","e","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './css/CollectionsPage.css';\r\nimport IndexedDbRepository from './IndexedRepository';\r\n\r\nclass AddImg extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.add = this.add.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            d: null,\r\n            name: 'rgergev',\r\n            format: 'ergerger',\r\n            description: '', \r\n            image: '',\r\n            tasks:null\r\n        }\r\n\r\n        this.handleAdd = async() => {\r\n            await this.repository.save( { name: this.state.name, description: this.state.description} );\r\n            this.setState( { tasks: null } );\r\n            this.setState( { tasks: await this.repository.findAll() } );\r\n          };\r\n          this.handleDelete = async( idToDelete ) => {\r\n            await this.repository.deleteById( idToDelete );\r\n            this.setState( { tasks: null } );\r\n            this.setState( { tasks: await this.repository.findAll() } );\r\n          };\r\n    }\r\n    componentDidMount() {\r\n        /*if ( !window.indexedDB ) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n        if ( !window.IDBTransaction ) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\r\n        if ( !window.IDBKeyRange ) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n        var d;\r\n        var openRequest = indexedDB.open(\"gallery\",1);\r\n        openRequest.onsuccess = function(e) {\r\n            console.log(\"Success!\");\r\n\r\n            d = e.target.result;\r\n            d.onerror = function(event){\r\n                alert(event.target.errorcode);\r\n            }\r\n        }\r\n \r\n        openRequest.onerror = function(e) {\r\n            console.log(\"Error\");\r\n            console.dir(e);\r\n        }\r\n\r\n        this.setState(\r\n            {db: d}\r\n        );\r\n        */\r\n \r\n\r\n      /*  var request = window.indexedDB.open(\"testDB\", 1);\r\n\r\n        var db;\r\nrequest.onerror = function(event){\r\n    console.log(\"Error opening DB\", event);\r\n}\r\nrequest.onupgradeneeded   = function(event){\r\n    console.log(\"Upgrading\");\r\n    db = event.target.result;\r\n    var objectStore = db.createObjectStore(\"students\", { keyPath : \"rollNo\" });\r\n};\r\nrequest.onsuccess  = function(event){\r\n    console.log(\"Success opening DB\");\r\n    db = event.target.result;\r\n}\r\nvar transaction = db.transaction([\"students\"],\"readwrite\");\r\ntransaction.oncomplete = function(event) {\r\n    console.log(\"Success\");\r\n};\r\n\r\ntransaction.onerror = function(event) {\r\n    console.log(\"Error\");\r\n};  \r\nvar objectStore = transaction.objectStore(\"students\");\r\n\r\nobjectStore.add(\"egega\");*/\r\nthis.repository = new IndexedDbRepository();\r\nthis.repository.findAll().then( tasks => this.setState( { tasks } ) );\r\n    }\r\n\r\n    add() {\r\n       /* alert(\"dfbdv\");\r\n        alert(this.state.db);\r\n        var transaction = this.state.db.transaction([\"notes\"],\"readwrite\");\r\n        var store = transaction.objectStore(\"notes\");\r\n\r\n        var request = store.add({name: this.state.name, format: this.state.format},1);*/\r\n        /*.............................................\r\n        var db;\r\nlet dbReq = indexedDB.open('myDB', 1);\r\ndbReq.onupgradeneeded = (event) => {\r\n  // Зададим переменной db ссылку на базу данных\r\n  db = event.target.result;\r\n  // Создадим хранилище объектов с именем notes.\r\n  let notes = db.createObjectStore('notes', {autoIncrement: true});\r\n}\r\ndbReq.onsuccess = (event) => {\r\n  db = event.target.result;\r\n  alert(db);\r\n  let tx = db.transaction(['notes'], 'readwrite');\r\n  alert(tx);\r\n  let store = tx.objectStore('notes');\r\n  alert(store);\r\n  let note = {name: this.state.name, descriptin: this.state.description};\r\n  alert(note);\r\nlet operation = store.add(note);\r\nalert(operation);\r\n}\r\ndbReq.onerror = (event) => {\r\n  alert('error opening database ' + event.target.errorCode);\r\n}*/\r\n\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>BDFBFSBS</h1>\r\n                <button type=\"button\" onClick={this.add}>fbfdbds</button>\r\n                <label>Заголовок</label><br/>\r\n          <input id=\"name\" class=\"input_1\" name=\"name\" type=\"text\" value={this.state.name} onChange={this.handleChange} required/><br/>\r\n          <label>Описание</label><br/>\r\n          <input id=\"description\" class=\"input_1\" name=\"description\" type=\"text\" value={this.state.description} onChange={this.handleChange} required/><br/>\r\n          <label>Текст</label><br/>\r\n          <button type=\"button\" class=\"btn green\" onClick={this.handleAdd}>Добавить</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AddImg;"]},"metadata":{},"sourceType":"module"}