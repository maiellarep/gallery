{"ast":null,"code":"if (!window.indexedDB) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\nif (!window.IDBTransaction) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\nif (!window.IDBKeyRange) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\nif (!window.indexedDB) throw new Error('IndexedDB is not awailable');\nconst DB_NAME = 'gallery'; //const OBJECT_STORE_NAME = 'photos';\n// Функция оборачивает обращение к indexedDB.open в Promise\n// keyPath поле, используемое как ключ объекта\n\nfunction openDatabasePromise() {\n  return new Promise((resolve, reject) => {\n    const dbOpenRequest = window.indexedDB.open(DB_NAME, 1);\n\n    dbOpenRequest.onblocked = () => {\n      reject('Требуется обновление структуры базы данных, хранимой в вашем браузере, ' + 'но браузер уведомил о блокировке базы данных.');\n    };\n\n    dbOpenRequest.onerror = err => {\n      console.log('Unable to open indexedDB ' + DB_NAME);\n      console.log(err);\n      reject('Невозможно открыть базу данных, либо при её открытии произошла неисправимая ошибка.' + (err.message ? 'Техническая информация: ' + err.message : ''));\n    };\n\n    dbOpenRequest.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      try {\n        db.deleteObjectStore('photos');\n        db.deleteObjectStore('collections');\n      } catch (err) {\n        console.log(err);\n      }\n\n      var photoStore = db.createObjectStore('photos', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n      photoStore.createIndex(\"name\", \"name\", {\n        unique: false\n      });\n      photoStore.createIndex(\"collections\", \"collection\", {\n        unique: false\n      });\n      var colStore = db.createObjectStore('collections', {\n        keyPath: 'colName',\n        autoIncrement: false\n      });\n    };\n\n    dbOpenRequest.onsuccess = e => {\n      var db = e.target.result;\n      var tx = db.transaction('collections', 'readwrite');\n      var store = tx.objectStore('collections');\n      store.put({\n        colName: 'Другое',\n        colPreview: '/9j/4AAQSkZJRgABAQEAeAB4AAD/4QBmRXhpZgAATU0AKgAAAAgABgESAAMAAAABAAEAAAMBAAUAAAABAAAAVgMDAAEAAAABAAAAAFEQAAEAAAABAQAAAFERAAQAAAABAAASdFESAAQAAAABAAASdAAAAAAAAYagAACxj//bAEMAAgEBAgEBAgICAgICAgIDBQMDAwMDBgQEAwUHBgcHBwYHBwgJCwkICAoIBwcKDQoKCwwMDAwHCQ4PDQwOCwwMDP/bAEMBAgICAwMDBgMDBgwIBwgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIAGsAzQMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AOkooor+wD/RQKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//Z'\n      });\n      resolve(dbOpenRequest.result);\n    };\n\n    dbOpenRequest.onerror = reject;\n  });\n} // Оборачиваем функции от ObjectStore, поддерживающие интерфейс IDBRequest\n// в вызов с использованием Promise\n\n\nfunction wrap(methodName) {\n  return function () {\n    const [objectStore, ...etc] = arguments;\n    return new Promise((resolve, reject) => {\n      const request = objectStore[methodName](...etc);\n\n      request.onsuccess = () => resolve(request.result);\n\n      request.onerror = reject;\n    });\n  };\n}\n\nconst deletePromise = wrap('delete');\nconst getAllPromise = wrap('getAll');\nconst getPromise = wrap('get');\nconst putPromise = wrap('put');\n\nfunction sPromise(objectStore, item, value) {\n  return new Promise((resolve, reject) => {\n    const index = objectStore.index(item).getAll(value);\n\n    index.onsuccess = () => resolve(index.result);\n\n    index.onerror = reject;\n  });\n}\n\nfunction clearPromise(objectStore) {\n  return new Promise((resolve, reject) => {\n    var request = objectStore.clear();\n\n    request.onsuccess = () => resolve();\n\n    request.onerror = reject;\n  });\n}\n\nexport default class IndexedDbRepository {\n  constructor() {\n    this.error = null; // конструктор нельзя объявить как async\n    // поэтому вынесено в отдельную функцию\n\n    this.openDatabasePromise = this._openDatabase();\n  }\n\n  async _openDatabase() {\n    try {\n      this.dbConnection = await openDatabasePromise();\n    } catch (error) {\n      this.error = error;\n      throw error;\n    }\n  }\n\n  async _tx(OBJECT_STORE_NAME, txMode, callback) {\n    await this.openDatabasePromise; // await db connection\n\n    const transaction = this.dbConnection.transaction([OBJECT_STORE_NAME], txMode);\n    const objectStore = transaction.objectStore(OBJECT_STORE_NAME);\n    return await callback(objectStore);\n  }\n\n  async findAll(OBJECT_STORE_NAME) {\n    return this._tx(OBJECT_STORE_NAME, 'readonly', objectStore => getAllPromise(objectStore));\n  }\n\n  async findById(OBJECT_STORE_NAME, key) {\n    return this._tx(OBJECT_STORE_NAME, 'readonly', objectStore => getPromise(objectStore, key));\n  }\n\n  async deleteById(OBJECT_STORE_NAME, key) {\n    return this._tx(OBJECT_STORE_NAME, 'readwrite', objectStore => deletePromise(objectStore, key));\n  }\n\n  async save(OBJECT_STORE_NAME, item) {\n    return this._tx(OBJECT_STORE_NAME, 'readwrite', objectStore => putPromise(objectStore, item));\n  }\n\n  async searchByField(OBJECT_STORE_NAME, field, value) {\n    return this._tx(OBJECT_STORE_NAME, 'readonly', objectStore => sPromise(objectStore, field, value));\n  }\n\n  async deleteAll(OBJECT_STORE_NAME) {\n    return this._tx(OBJECT_STORE_NAME, 'readwrite', objectStore => clearPromise(objectStore));\n  }\n\n  async count(OBJECT_STORE_NAME) {\n    return this._tx(OBJECT_STORE_NAME, 'readonly', objectStore => () => {\n      return objectStore.count();\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/internship/new/gallery/src/IndexedRepository.js"],"names":["window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","Error","DB_NAME","openDatabasePromise","Promise","resolve","reject","dbOpenRequest","open","onblocked","onerror","err","console","log","message","onupgradeneeded","event","db","target","result","deleteObjectStore","photoStore","createObjectStore","keyPath","autoIncrement","createIndex","unique","colStore","onsuccess","e","tx","transaction","store","objectStore","put","colName","colPreview","wrap","methodName","etc","arguments","request","deletePromise","getAllPromise","getPromise","putPromise","sPromise","item","value","index","getAll","clearPromise","clear","IndexedDbRepository","constructor","error","_openDatabase","dbConnection","_tx","OBJECT_STORE_NAME","txMode","callback","findAll","findById","key","deleteById","save","searchByField","field","deleteAll","count"],"mappings":"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","sourcesContent":["if ( !window.indexedDB ) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\nif ( !window.IDBTransaction ) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\r\nif ( !window.IDBKeyRange ) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\r\nif ( !window.indexedDB ) throw new Error( 'IndexedDB is not awailable' );\r\n\r\nconst DB_NAME = 'gallery';\r\n//const OBJECT_STORE_NAME = 'photos';\r\n\r\n// Функция оборачивает обращение к indexedDB.open в Promise\r\n// keyPath поле, используемое как ключ объекта\r\nfunction openDatabasePromise() {\r\n  return new Promise( ( resolve, reject ) => {\r\n    const dbOpenRequest = window.indexedDB.open( DB_NAME, 1 );\r\n\r\n    dbOpenRequest.onblocked = () => {\r\n      reject( 'Требуется обновление структуры базы данных, хранимой в вашем браузере, ' +\r\n        'но браузер уведомил о блокировке базы данных.' );\r\n    };\r\n\r\n    dbOpenRequest.onerror = err => {\r\n      console.log( 'Unable to open indexedDB ' + DB_NAME );\r\n      console.log( err );\r\n      reject( 'Невозможно открыть базу данных, либо при её открытии произошла неисправимая ошибка.' +\r\n       ( err.message ? 'Техническая информация: ' + err.message : '' ) );\r\n    };\r\n\r\n    dbOpenRequest.onupgradeneeded = event => {\r\n      const db = event.target.result;\r\n      try {\r\n        db.deleteObjectStore( 'photos' );\r\n        db.deleteObjectStore( 'collections' );\r\n      } catch ( err ) { console.log( err ); }\r\n      var photoStore = db.createObjectStore( 'photos', {keyPath: 'id', autoIncrement: true } );\r\n      photoStore.createIndex(\"name\", \"name\", { unique: false });\r\n      photoStore.createIndex(\"collections\", \"collection\", { unique: false });\r\n      var colStore = db.createObjectStore( 'collections', {keyPath: 'colName', autoIncrement: false } ); \r\n    };\r\n\r\n    dbOpenRequest.onsuccess = (e) => {\r\n      var db = e.target.result;\r\n      var tx = db.transaction('collections', 'readwrite');\r\n      var store = tx.objectStore('collections');\r\n      store.put({colName: 'Другое',\r\n      colPreview: '/9j/4AAQSkZJRgABAQEAeAB4AAD/4QBmRXhpZgAATU0AKgAAAAgABgESAAMAAAABAAEAAAMBAAUAAAABAAAAVgMDAAEAAAABAAAAAFEQAAEAAAABAQAAAFERAAQAAAABAAASdFESAAQAAAABAAASdAAAAAAAAYagAACxj//bAEMAAgEBAgEBAgICAgICAgIDBQMDAwMDBgQEAwUHBgcHBwYHBwgJCwkICAoIBwcKDQoKCwwMDAwHCQ4PDQwOCwwMDP/bAEMBAgICAwMDBgMDBgwIBwgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIAGsAzQMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AOkooor+wD/RQKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//Z'});\r\n      resolve( dbOpenRequest.result );\r\n    };\r\n\r\n    dbOpenRequest.onerror = reject;\r\n  } );\r\n}\r\n\r\n// Оборачиваем функции от ObjectStore, поддерживающие интерфейс IDBRequest\r\n// в вызов с использованием Promise\r\nfunction wrap( methodName ) {\r\n  return function() {\r\n    const [ objectStore, ...etc ] = arguments;\r\n    return new Promise( ( resolve, reject ) => {\r\n      const request = objectStore[ methodName ]( ...etc );\r\n      request.onsuccess = () => resolve( request.result );\r\n      request.onerror = reject;\r\n    } );\r\n  };\r\n}\r\nconst deletePromise = wrap( 'delete' );\r\nconst getAllPromise = wrap( 'getAll' );\r\nconst getPromise = wrap( 'get' );\r\nconst putPromise = wrap( 'put' );\r\n\r\nfunction sPromise( objectStore, item, value ) {\r\n    return new Promise( ( resolve, reject ) => {\r\n      const index = objectStore.index(item).getAll(value);\r\n      index.onsuccess = () => resolve(index.result);\r\n      index.onerror = reject;\r\n    } );\r\n}\r\n\r\nfunction clearPromise(objectStore){\r\n  return new Promise((resolve, reject) => {\r\n    var request = objectStore.clear();\r\n    request.onsuccess = () => resolve();\r\n    request.onerror = reject;\r\n  });\r\n}\r\n\r\nexport default class IndexedDbRepository {\r\n\r\n  dbConnection ;\r\n  error ;\r\n  openDatabasePromise ;\r\n\r\n  constructor() {\r\n    this.error = null;\r\n \r\n\r\n    // конструктор нельзя объявить как async\r\n    // поэтому вынесено в отдельную функцию\r\n    this.openDatabasePromise = this._openDatabase();\r\n  }\r\n\r\n  async _openDatabase() {\r\n    try {\r\n      this.dbConnection = await openDatabasePromise();\r\n    } catch ( error ) {\r\n      this.error = error;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async _tx(OBJECT_STORE_NAME, txMode, callback ) {\r\n    await this.openDatabasePromise; // await db connection\r\n    const transaction = this.dbConnection.transaction( [ OBJECT_STORE_NAME ], txMode );\r\n    const objectStore = transaction.objectStore( OBJECT_STORE_NAME );\r\n    return await callback( objectStore );\r\n  }\r\n\r\n  async findAll(OBJECT_STORE_NAME) {\r\n    return this._tx( OBJECT_STORE_NAME, 'readonly', objectStore => getAllPromise( objectStore ) );\r\n  }\r\n\r\n  async findById(OBJECT_STORE_NAME, key ) {\r\n    return this._tx( OBJECT_STORE_NAME, 'readonly', objectStore => getPromise( objectStore, key ) );\r\n  }\r\n\r\n  async deleteById(OBJECT_STORE_NAME, key ){\r\n    return this._tx( OBJECT_STORE_NAME, 'readwrite', objectStore => deletePromise( objectStore, key ) );\r\n  }\r\n\r\n  async save(OBJECT_STORE_NAME, item){\r\n    return this._tx( OBJECT_STORE_NAME, 'readwrite', objectStore => putPromise( objectStore, item ) );\r\n  }\r\n\r\n  async searchByField(OBJECT_STORE_NAME, field, value) {\r\n    return this._tx(OBJECT_STORE_NAME, 'readonly', objectStore => sPromise(objectStore, field, value));\r\n  }\r\n\r\n  async deleteAll(OBJECT_STORE_NAME) {\r\n    return this._tx(OBJECT_STORE_NAME, 'readwrite', objectStore => clearPromise(objectStore));\r\n  }\r\n\r\n  async count(OBJECT_STORE_NAME) {\r\n    return this._tx(OBJECT_STORE_NAME, 'readonly', objectStore => () => {return objectStore.count()});\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}