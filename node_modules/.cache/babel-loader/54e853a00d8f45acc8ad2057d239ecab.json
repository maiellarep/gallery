{"ast":null,"code":"if (!window.indexedDB) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\nif (!window.IDBTransaction) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\nif (!window.IDBKeyRange) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\nif (!window.indexedDB) throw new Error('IndexedDB is not awailable');\nconst DB_NAME = 'gallery';\nconst OBJECT_STORE_NAME = 'notes'; // Функция оборачивает обращение к indexedDB.open в Promise\n// keyPath поле, используемое как ключ объекта\n\nfunction openDatabasePromise() {\n  return new Promise((resolve, reject) => {\n    const dbOpenRequest = window.indexedDB.open(DB_NAME, 1);\n\n    dbOpenRequest.onblocked = () => {\n      reject('Требуется обновление структуры базы данных, хранимой в вашем браузере, ' + 'но браузер уведомил о блокировке базы данных.');\n    };\n\n    dbOpenRequest.onerror = err => {\n      console.log('Unable to open indexedDB ' + DB_NAME);\n      console.log(err);\n      reject('Невозможно открыть базу данных, либо при её открытии произошла неисправимая ошибка.' + (err.message ? 'Техническая информация: ' + err.message : ''));\n    };\n\n    dbOpenRequest.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      try {\n        db.deleteObjectStore(OBJECT_STORE_NAME);\n      } catch (err) {\n        console.log(err);\n      }\n\n      db.createObjectStore(OBJECT_STORE_NAME, {\n        autoIncrement: true\n      });\n    };\n\n    dbOpenRequest.onsuccess = () => {\n      console.info('Successfully open indexedDB connection to ' + DB_NAME);\n      resolve(dbOpenRequest.result);\n    };\n\n    dbOpenRequest.onerror = reject;\n  });\n} // Оборачиваем функции от ObjectStore, поддерживающие интерфейс IDBRequest\n// в вызов с использованием Promise\n\n\nfunction wrap(methodName) {\n  return function () {\n    const [objectStore, ...etc] = arguments;\n    return new Promise((resolve, reject) => {\n      const request = objectStore[methodName](...etc);\n\n      request.onsuccess = () => resolve(request.result);\n\n      request.onerror = reject;\n    });\n  };\n}\n\nconst deletePromise = wrap('delete');\nconst getAllPromise = wrap('getAll');\nconst getPromise = wrap('get');\nconst putPromise = wrap('put');\nexport default class IndexedDbRepository {\n  constructor(keyPath) {\n    this.error = null;\n    this.keyPath = keyPath; // конструктор нельзя объявить как async\n    // поэтому вынесено в отдельную функцию\n\n    this.openDatabasePromise = this._openDatabase(keyPath);\n  }\n\n  async _openDatabase(keyPath) {\n    try {\n      this.dbConnection = await openDatabasePromise(keyPath);\n    } catch (error) {\n      this.error = error;\n      throw error;\n    }\n  }\n\n  async _tx(txMode, callback) {\n    await this.openDatabasePromise; // await db connection\n\n    const transaction = this.dbConnection.transaction([OBJECT_STORE_NAME], txMode);\n    const objectStore = transaction.objectStore(OBJECT_STORE_NAME);\n    return await callback(objectStore);\n  }\n\n  async findAll() {\n    return this._tx('readonly', objectStore => getAllPromise(objectStore));\n  }\n\n  async findById(key) {\n    return this._tx('readonly', objectStore => getPromise(objectStore, key));\n  }\n\n  async deleteById(key) {\n    return this._tx('readwrite', objectStore => deletePromise(objectStore, key));\n  }\n\n  async save(item) {\n    return this._tx('readwrite', objectStore => putPromise(objectStore, item));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/internship/gallery/src/IndexedRepository.js"],"names":["window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","Error","DB_NAME","OBJECT_STORE_NAME","openDatabasePromise","Promise","resolve","reject","dbOpenRequest","open","onblocked","onerror","err","console","log","message","onupgradeneeded","event","db","target","result","deleteObjectStore","createObjectStore","autoIncrement","onsuccess","info","wrap","methodName","objectStore","etc","arguments","request","deletePromise","getAllPromise","getPromise","putPromise","IndexedDbRepository","constructor","keyPath","error","_openDatabase","dbConnection","_tx","txMode","callback","transaction","findAll","findById","key","deleteById","save","item"],"mappings":"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","sourcesContent":["if ( !window.indexedDB ) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\nif ( !window.IDBTransaction ) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\r\nif ( !window.IDBKeyRange ) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\r\nif ( !window.indexedDB ) throw new Error( 'IndexedDB is not awailable' );\r\n\r\nconst DB_NAME = 'gallery';\r\nconst OBJECT_STORE_NAME = 'notes';\r\n\r\n// Функция оборачивает обращение к indexedDB.open в Promise\r\n// keyPath поле, используемое как ключ объекта\r\nfunction openDatabasePromise() {\r\n  return new Promise( ( resolve, reject ) => {\r\n    const dbOpenRequest = window.indexedDB.open( DB_NAME, 1 );\r\n\r\n    dbOpenRequest.onblocked = () => {\r\n      reject( 'Требуется обновление структуры базы данных, хранимой в вашем браузере, ' +\r\n        'но браузер уведомил о блокировке базы данных.' );\r\n    };\r\n\r\n    dbOpenRequest.onerror = err => {\r\n      console.log( 'Unable to open indexedDB ' + DB_NAME );\r\n      console.log( err );\r\n      reject( 'Невозможно открыть базу данных, либо при её открытии произошла неисправимая ошибка.' +\r\n       ( err.message ? 'Техническая информация: ' + err.message : '' ) );\r\n    };\r\n\r\n    dbOpenRequest.onupgradeneeded = event => {\r\n      const db = event.target.result;\r\n      try {\r\n        db.deleteObjectStore( OBJECT_STORE_NAME );\r\n      } catch ( err ) { console.log( err ); }\r\n      db.createObjectStore( OBJECT_STORE_NAME, {autoIncrement: true} );\r\n    };\r\n\r\n    dbOpenRequest.onsuccess = () => {\r\n      console.info( 'Successfully open indexedDB connection to ' + DB_NAME );\r\n      resolve( dbOpenRequest.result );\r\n    };\r\n\r\n    dbOpenRequest.onerror = reject;\r\n  } );\r\n}\r\n\r\n// Оборачиваем функции от ObjectStore, поддерживающие интерфейс IDBRequest\r\n// в вызов с использованием Promise\r\nfunction wrap( methodName ) {\r\n  return function() {\r\n    const [ objectStore, ...etc ] = arguments;\r\n    return new Promise( ( resolve, reject ) => {\r\n      const request = objectStore[ methodName ]( ...etc );\r\n      request.onsuccess = () => resolve( request.result );\r\n      request.onerror = reject;\r\n    } );\r\n  };\r\n}\r\nconst deletePromise = wrap( 'delete' );\r\nconst getAllPromise = wrap( 'getAll' );\r\nconst getPromise = wrap( 'get' );\r\nconst putPromise = wrap( 'put' );\r\n\r\nexport default class IndexedDbRepository {\r\n\r\n  dbConnection ;\r\n  error ;\r\n  openDatabasePromise ;\r\n\r\n  constructor( keyPath ) {\r\n    this.error = null;\r\n    this.keyPath = keyPath;\r\n\r\n    // конструктор нельзя объявить как async\r\n    // поэтому вынесено в отдельную функцию\r\n    this.openDatabasePromise = this._openDatabase( keyPath );\r\n  }\r\n\r\n  async _openDatabase( keyPath ) {\r\n    try {\r\n      this.dbConnection = await openDatabasePromise( keyPath );\r\n    } catch ( error ) {\r\n      this.error = error;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async _tx( txMode, callback ) {\r\n    await this.openDatabasePromise; // await db connection\r\n    const transaction = this.dbConnection.transaction( [ OBJECT_STORE_NAME ], txMode );\r\n    const objectStore = transaction.objectStore( OBJECT_STORE_NAME );\r\n    return await callback( objectStore );\r\n  }\r\n\r\n  async findAll() {\r\n    return this._tx( 'readonly', objectStore => getAllPromise( objectStore ) );\r\n  }\r\n\r\n  async findById( key ) {\r\n    return this._tx( 'readonly', objectStore => getPromise( objectStore, key ) );\r\n  }\r\n\r\n  async deleteById( key ){\r\n    return this._tx( 'readwrite', objectStore => deletePromise( objectStore, key ) );\r\n  }\r\n\r\n  async save( item){\r\n    return this._tx( 'readwrite', objectStore => putPromise( objectStore, item ) );\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}