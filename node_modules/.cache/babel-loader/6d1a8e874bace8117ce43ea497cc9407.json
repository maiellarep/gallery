{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\internship\\\\gallery\\\\src\\\\AddImg.js\";\nimport React from 'react';\nimport './css/CollectionsPage.css';\nimport IndexedDBRepository from './IndexedRepository.js';\n\nclass AddImg extends React.Component {\n  constructor(props) {\n    super(props);\n    this.add = this.add.bind(this);\n    this.state = {\n      db: '',\n      name: 'rgergev',\n      format: 'ergerger',\n      description: '',\n      image: ''\n    };\n  }\n\n  componentDidMount() {\n    if (!window.indexedDB) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n    if (!window.IDBTransaction) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\n    if (!window.IDBKeyRange) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\n    var d;\n    var openRequest = indexedDB.open(\"test\", 1);\n\n    openRequest.onsuccess = function (e) {\n      console.log(\"Success!\");\n      d = e.target.result;\n    };\n\n    openRequest.onerror = function (e) {\n      console.log(\"Error\");\n      console.dir(e);\n    };\n\n    this.setState({\n      db: d\n    });\n  }\n\n  add() {\n    var transaction = this.state.db.transaction([\"notes\"], \"readwrite\");\n    var store = transaction.objectStore(\"notes\");\n    var request = store.add({\n      name: this.state.name,\n      format: this.state.format\n    }, 1);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, this.add);\n  }\n\n}\n\nexport default AddImg;","map":{"version":3,"sources":["C:/Users/User/Desktop/internship/gallery/src/AddImg.js"],"names":["React","IndexedDBRepository","AddImg","Component","constructor","props","add","bind","state","db","name","format","description","image","componentDidMount","window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","d","openRequest","open","onsuccess","e","console","log","target","result","onerror","dir","setState","transaction","store","objectStore","request","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,2BAAP;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;;AAEA,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,GAAL,GAAW,KAAKA,GAAL,CAASC,IAAT,CAAc,IAAd,CAAX;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,EAAE,EAAE,EADK;AAETC,MAAAA,IAAI,EAAE,SAFG;AAGTC,MAAAA,MAAM,EAAE,UAHC;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,KAAK,EAAE;AALE,KAAb;AAOH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,QAAK,CAACC,MAAM,CAACC,SAAb,EAAyBD,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,IAAoBD,MAAM,CAACE,YAA3B,IAA2CF,MAAM,CAACG,eAAlD,IAAqEH,MAAM,CAACI,WAA/F;AACzB,QAAK,CAACJ,MAAM,CAACK,cAAb,EAA8BL,MAAM,CAACK,cAAP,GAAwBL,MAAM,CAACM,oBAAP,IAA+BN,MAAM,CAACO,gBAA9D;AAC9B,QAAK,CAACP,MAAM,CAACQ,WAAb,EAA2BR,MAAM,CAACQ,WAAP,GAAqBR,MAAM,CAACS,iBAAP,IAA4BT,MAAM,CAACU,aAAxD;AAC3B,QAAIC,CAAJ;AACA,QAAIC,WAAW,GAAGX,SAAS,CAACY,IAAV,CAAe,MAAf,EAAsB,CAAtB,CAAlB;;AACAD,IAAAA,WAAW,CAACE,SAAZ,GAAwB,UAASC,CAAT,EAAY;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAN,MAAAA,CAAC,GAAGI,CAAC,CAACG,MAAF,CAASC,MAAb;AAEH,KAJD;;AAMAP,IAAAA,WAAW,CAACQ,OAAZ,GAAsB,UAASL,CAAT,EAAY;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACK,GAAR,CAAYN,CAAZ;AACH,KAHD;;AAKA,SAAKO,QAAL,CACI;AAAC5B,MAAAA,EAAE,EAAEiB;AAAL,KADJ;AAIH;;AAEDpB,EAAAA,GAAG,GAAG;AACF,QAAIgC,WAAW,GAAG,KAAK9B,KAAL,CAAWC,EAAX,CAAc6B,WAAd,CAA0B,CAAC,OAAD,CAA1B,EAAoC,WAApC,CAAlB;AACA,QAAIC,KAAK,GAAGD,WAAW,CAACE,WAAZ,CAAwB,OAAxB,CAAZ;AAEA,QAAIC,OAAO,GAAGF,KAAK,CAACjC,GAAN,CAAU;AAACI,MAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE,IAAlB;AAAwBC,MAAAA,MAAM,EAAE,KAAKH,KAAL,CAAWG;AAA3C,KAAV,EAA6D,CAA7D,CAAd;AACH;;AAED+B,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKpC,GADV,CADJ;AAKH;;AAhDgC;;AAoDrC,eAAeJ,MAAf","sourcesContent":["import React from 'react';\r\nimport './css/CollectionsPage.css';\r\nimport IndexedDBRepository from './IndexedRepository.js';\r\n\r\nclass AddImg extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.add = this.add.bind(this);\r\n        this.state = {\r\n            db: '',\r\n            name: 'rgergev',\r\n            format: 'ergerger',\r\n            description: '', \r\n            image: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if ( !window.indexedDB ) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n        if ( !window.IDBTransaction ) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\r\n        if ( !window.IDBKeyRange ) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n        var d;\r\n        var openRequest = indexedDB.open(\"test\",1);\r\n        openRequest.onsuccess = function(e) {\r\n            console.log(\"Success!\");\r\n            d = e.target.result;\r\n\r\n        }\r\n \r\n        openRequest.onerror = function(e) {\r\n            console.log(\"Error\");\r\n            console.dir(e);\r\n        }\r\n\r\n        this.setState(\r\n            {db: d}\r\n        );\r\n        \r\n    }\r\n\r\n    add() {\r\n        var transaction = this.state.db.transaction([\"notes\"],\"readwrite\");\r\n        var store = transaction.objectStore(\"notes\");\r\n\r\n        var request = store.add({name: this.state.name, format: this.state.format},1);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.add}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AddImg;"]},"metadata":{},"sourceType":"module"}