{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\internship\\\\gallery\\\\src\\\\AddImg.js\";\nimport React from 'react';\nimport './css/CollectionsPage.css';\nimport IndexedDBRepository from './IndexedRepository.js';\n\nclass AddImg extends React.Component {\n  constructor(props) {\n    super(props);\n    this.add = this.add.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      d: null,\n      name: 'rgergev',\n      format: 'ergerger',\n      description: '',\n      image: ''\n    };\n  }\n\n  componentDidMount() {\n    /*if ( !window.indexedDB ) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n    if ( !window.IDBTransaction ) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\r\n    if ( !window.IDBKeyRange ) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n    var d;\r\n    var openRequest = indexedDB.open(\"gallery\",1);\r\n    openRequest.onsuccess = function(e) {\r\n        console.log(\"Success!\");\r\n          d = e.target.result;\r\n        d.onerror = function(event){\r\n            alert(event.target.errorcode);\r\n        }\r\n    }\r\n       openRequest.onerror = function(e) {\r\n        console.log(\"Error\");\r\n        console.dir(e);\r\n    }\r\n      this.setState(\r\n        {db: d}\r\n    );\r\n    */\n\n    /*  var request = window.indexedDB.open(\"testDB\", 1);\r\n        var db;\r\n    request.onerror = function(event){\r\n    console.log(\"Error opening DB\", event);\r\n    }\r\n    request.onupgradeneeded   = function(event){\r\n    console.log(\"Upgrading\");\r\n    db = event.target.result;\r\n    var objectStore = db.createObjectStore(\"students\", { keyPath : \"rollNo\" });\r\n    };\r\n    request.onsuccess  = function(event){\r\n    console.log(\"Success opening DB\");\r\n    db = event.target.result;\r\n    }\r\n    var transaction = db.transaction([\"students\"],\"readwrite\");\r\n    transaction.oncomplete = function(event) {\r\n    console.log(\"Success\");\r\n    };\r\n    transaction.onerror = function(event) {\r\n    console.log(\"Error\");\r\n    };  \r\n    var objectStore = transaction.objectStore(\"students\");\r\n    objectStore.add(\"egega\");*/\n  }\n\n  add() {\n    /* alert(\"dfbdv\");\r\n     alert(this.state.db);\r\n     var transaction = this.state.db.transaction([\"notes\"],\"readwrite\");\r\n     var store = transaction.objectStore(\"notes\");\r\n       var request = store.add({name: this.state.name, format: this.state.format},1);*/\n    var db;\n    let dbReq = indexedDB.open('myDB', 1);\n\n    dbReq.onupgradeneeded = event => {\n      // Зададим переменной db ссылку на базу данных\n      db = event.target.result; // Создадим хранилище объектов с именем notes.\n\n      let notes = db.createObjectStore('notes', {\n        autoIncrement: true\n      });\n    };\n\n    dbReq.onsuccess = event => {\n      db = event.target.result;\n      alert(db);\n      let tx = db.transaction(['notes'], 'readwrite');\n      let store = tx.objectStore('notes');\n      let note = {\n        name: this.state.name,\n        descriptin: this.state.description\n      };\n      let operation = store.add(note);\n    };\n\n    dbReq.onerror = event => {\n      alert('error opening database ' + event.target.errorCode);\n    }; // Добаляем заметку в хранилище объектов\n\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, \"BDFBFSBS\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.add,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, \"fbfdbds\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, \"\\u0417\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"name\",\n      class: \"input_1\",\n      name: \"name\",\n      type: \"text\",\n      value: this.state.title,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 132\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"description\",\n      class: \"input_1\",\n      name: \"description\",\n      type: \"text\",\n      value: this.state.description,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 152\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, \"\\u0422\\u0435\\u043A\\u0441\\u0442\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn green\",\n      onClick: this.add,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"));\n  }\n\n}\n\nexport default AddImg;","map":{"version":3,"sources":["C:/Users/User/Desktop/internship/gallery/src/AddImg.js"],"names":["React","IndexedDBRepository","AddImg","Component","constructor","props","add","bind","handleChange","state","d","name","format","description","image","componentDidMount","db","dbReq","indexedDB","open","onupgradeneeded","event","target","result","notes","createObjectStore","autoIncrement","onsuccess","alert","tx","transaction","store","objectStore","note","descriptin","operation","onerror","errorCode","e","setState","value","render","title"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './css/CollectionsPage.css';\r\nimport IndexedDBRepository from './IndexedRepository.js';\r\n\r\nclass AddImg extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.add = this.add.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            d: null,\r\n            name: 'rgergev',\r\n            format: 'ergerger',\r\n            description: '', \r\n            image: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        /*if ( !window.indexedDB ) window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n        if ( !window.IDBTransaction ) window.IDBTransaction = window.webkitIDBTransaction || window.msIDBTransaction;\r\n        if ( !window.IDBKeyRange ) window.IDBKeyRange = window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n        var d;\r\n        var openRequest = indexedDB.open(\"gallery\",1);\r\n        openRequest.onsuccess = function(e) {\r\n            console.log(\"Success!\");\r\n\r\n            d = e.target.result;\r\n            d.onerror = function(event){\r\n                alert(event.target.errorcode);\r\n            }\r\n        }\r\n \r\n        openRequest.onerror = function(e) {\r\n            console.log(\"Error\");\r\n            console.dir(e);\r\n        }\r\n\r\n        this.setState(\r\n            {db: d}\r\n        );\r\n        */\r\n \r\n\r\n      /*  var request = window.indexedDB.open(\"testDB\", 1);\r\n\r\n        var db;\r\nrequest.onerror = function(event){\r\n    console.log(\"Error opening DB\", event);\r\n}\r\nrequest.onupgradeneeded   = function(event){\r\n    console.log(\"Upgrading\");\r\n    db = event.target.result;\r\n    var objectStore = db.createObjectStore(\"students\", { keyPath : \"rollNo\" });\r\n};\r\nrequest.onsuccess  = function(event){\r\n    console.log(\"Success opening DB\");\r\n    db = event.target.result;\r\n}\r\nvar transaction = db.transaction([\"students\"],\"readwrite\");\r\ntransaction.oncomplete = function(event) {\r\n    console.log(\"Success\");\r\n};\r\n\r\ntransaction.onerror = function(event) {\r\n    console.log(\"Error\");\r\n};  \r\nvar objectStore = transaction.objectStore(\"students\");\r\n\r\nobjectStore.add(\"egega\");*/\r\n\r\n    }\r\n\r\n    add() {\r\n       /* alert(\"dfbdv\");\r\n        alert(this.state.db);\r\n        var transaction = this.state.db.transaction([\"notes\"],\"readwrite\");\r\n        var store = transaction.objectStore(\"notes\");\r\n\r\n        var request = store.add({name: this.state.name, format: this.state.format},1);*/\r\n        var db;\r\nlet dbReq = indexedDB.open('myDB', 1);\r\ndbReq.onupgradeneeded = (event) => {\r\n  // Зададим переменной db ссылку на базу данных\r\n  db = event.target.result;\r\n  // Создадим хранилище объектов с именем notes.\r\n  let notes = db.createObjectStore('notes', {autoIncrement: true});\r\n}\r\ndbReq.onsuccess = (event) => {\r\n  db = event.target.result;\r\n  alert(db);\r\n  let tx = db.transaction(['notes'], 'readwrite');\r\n  let store = tx.objectStore('notes');\r\n  let note = {name: this.state.name, descriptin: this.state.description};\r\nlet operation = store.add(note);\r\n}\r\ndbReq.onerror = (event) => {\r\n  alert('error opening database ' + event.target.errorCode);\r\n}\r\n\r\n\r\n// Добаляем заметку в хранилище объектов\r\n\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>BDFBFSBS</h1>\r\n                <button type=\"button\" onClick={this.add}>fbfdbds</button>\r\n                <label>Заголовок</label><br/>\r\n          <input id=\"name\" class=\"input_1\" name=\"name\" type=\"text\" value={this.state.title} onChange={this.handleChange} required/><br/>\r\n          <label>Описание</label><br/>\r\n          <input id=\"description\" class=\"input_1\" name=\"description\" type=\"text\" value={this.state.description} onChange={this.handleChange} required/><br/>\r\n          <label>Текст</label><br/>\r\n          <button type=\"button\" class=\"btn green\" onClick={this.add}>Добавить</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AddImg;"]},"metadata":{},"sourceType":"module"}